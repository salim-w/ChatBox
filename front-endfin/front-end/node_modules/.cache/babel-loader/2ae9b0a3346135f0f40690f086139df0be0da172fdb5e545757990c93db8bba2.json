{"ast":null,"code":"// StompClient.js\nimport SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\nclass StompClient extends Client {\n  constructor() {\n    super();\n    this.WEB_SOCKET_BASE_URL = 'http://localhost:8080/ws';\n    this.messageCallback = null;\n    this.webSocketFactory = () => {\n      return new SockJS(this.WEB_SOCKET_BASE_URL);\n    };\n    this.reconnectDelay = 5000;\n    this.heartbeatIncoming = 4000;\n    this.heartbeatOutgoing = 4000;\n    this.onConnect = frame => {\n      console.log('Connected:', frame);\n\n      // Subscribe to messages topic\n      this.subscribe('/topic/messages', message => {\n        try {\n          const receivedMessage = JSON.parse(message.body);\n          console.log('Received message:', receivedMessage);\n          if (this.messageCallback) {\n            this.messageCallback(receivedMessage);\n          }\n        } catch (error) {\n          console.error('Error parsing message:', error);\n        }\n      });\n\n      // Subscribe to public topic for user events\n      this.subscribe('/topic/public', message => {\n        try {\n          const publicMessage = JSON.parse(message.body);\n          console.log('Public message:', publicMessage);\n          if (this.messageCallback) {\n            this.messageCallback(publicMessage);\n          }\n        } catch (error) {\n          console.error('Error parsing public message:', error);\n        }\n      });\n    };\n    this.onStompError = frame => {\n      console.error('STOMP error:', frame.headers['message']);\n      console.error('Additional details:', frame.body);\n    };\n    this.onWebSocketError = error => {\n      console.error('WebSocket error:', error);\n    };\n    this.onDisconnect = () => {\n      console.log('Disconnected from WebSocket');\n    };\n  }\n  setMessageCallback(callback) {\n    this.messageCallback = callback;\n  }\n}\nexport default StompClient;","map":{"version":3,"names":["SockJS","Client","StompClient","constructor","WEB_SOCKET_BASE_URL","messageCallback","webSocketFactory","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","frame","console","log","subscribe","message","receivedMessage","JSON","parse","body","error","publicMessage","onStompError","headers","onWebSocketError","onDisconnect","setMessageCallback","callback"],"sources":["C:/Users/asus/Desktop/front-end/src/proxy/stomp.js"],"sourcesContent":["// StompClient.js\r\nimport SockJS from 'sockjs-client';\r\nimport { Client } from '@stomp/stompjs';\r\n\r\nclass StompClient extends Client {\r\n    constructor() {\r\n        super();\r\n\r\n        this.WEB_SOCKET_BASE_URL = 'http://localhost:8080/ws';\r\n        this.messageCallback = null;\r\n\r\n        this.webSocketFactory = () => {\r\n            return new SockJS(this.WEB_SOCKET_BASE_URL);\r\n        };\r\n\r\n        this.reconnectDelay = 5000;\r\n        this.heartbeatIncoming = 4000;\r\n        this.heartbeatOutgoing = 4000;\r\n\r\n        this.onConnect = (frame) => {\r\n            console.log('Connected:', frame);\r\n\r\n            // Subscribe to messages topic\r\n            this.subscribe('/topic/messages', (message) => {\r\n                try {\r\n                    const receivedMessage = JSON.parse(message.body);\r\n                    console.log('Received message:', receivedMessage);\r\n                    if (this.messageCallback) {\r\n                        this.messageCallback(receivedMessage);\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error parsing message:', error);\r\n                }\r\n            });\r\n\r\n            // Subscribe to public topic for user events\r\n            this.subscribe('/topic/public', (message) => {\r\n                try {\r\n                    const publicMessage = JSON.parse(message.body);\r\n                    console.log('Public message:', publicMessage);\r\n                    if (this.messageCallback) {\r\n                        this.messageCallback(publicMessage);\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error parsing public message:', error);\r\n                }\r\n            });\r\n        };\r\n\r\n        this.onStompError = (frame) => {\r\n            console.error('STOMP error:', frame.headers['message']);\r\n            console.error('Additional details:', frame.body);\r\n        };\r\n\r\n        this.onWebSocketError = (error) => {\r\n            console.error('WebSocket error:', error);\r\n        };\r\n\r\n        this.onDisconnect = () => {\r\n            console.log('Disconnected from WebSocket');\r\n        };\r\n    }\r\n\r\n    setMessageCallback(callback) {\r\n        this.messageCallback = callback;\r\n    }\r\n}\r\n\r\nexport default StompClient;"],"mappings":"AAAA;AACA,OAAOA,MAAM,MAAM,eAAe;AAClC,SAASC,MAAM,QAAQ,gBAAgB;AAEvC,MAAMC,WAAW,SAASD,MAAM,CAAC;EAC7BE,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;IAEP,IAAI,CAACC,mBAAmB,GAAG,0BAA0B;IACrD,IAAI,CAACC,eAAe,GAAG,IAAI;IAE3B,IAAI,CAACC,gBAAgB,GAAG,MAAM;MAC1B,OAAO,IAAIN,MAAM,CAAC,IAAI,CAACI,mBAAmB,CAAC;IAC/C,CAAC;IAED,IAAI,CAACG,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAE7B,IAAI,CAACC,SAAS,GAAIC,KAAK,IAAK;MACxBC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,KAAK,CAAC;;MAEhC;MACA,IAAI,CAACG,SAAS,CAAC,iBAAiB,EAAGC,OAAO,IAAK;QAC3C,IAAI;UACA,MAAMC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;UAChDP,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEG,eAAe,CAAC;UACjD,IAAI,IAAI,CAACX,eAAe,EAAE;YACtB,IAAI,CAACA,eAAe,CAACW,eAAe,CAAC;UACzC;QACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;UACZR,OAAO,CAACQ,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAClD;MACJ,CAAC,CAAC;;MAEF;MACA,IAAI,CAACN,SAAS,CAAC,eAAe,EAAGC,OAAO,IAAK;QACzC,IAAI;UACA,MAAMM,aAAa,GAAGJ,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;UAC9CP,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEQ,aAAa,CAAC;UAC7C,IAAI,IAAI,CAAChB,eAAe,EAAE;YACtB,IAAI,CAACA,eAAe,CAACgB,aAAa,CAAC;UACvC;QACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;UACZR,OAAO,CAACQ,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACzD;MACJ,CAAC,CAAC;IACN,CAAC;IAED,IAAI,CAACE,YAAY,GAAIX,KAAK,IAAK;MAC3BC,OAAO,CAACQ,KAAK,CAAC,cAAc,EAAET,KAAK,CAACY,OAAO,CAAC,SAAS,CAAC,CAAC;MACvDX,OAAO,CAACQ,KAAK,CAAC,qBAAqB,EAAET,KAAK,CAACQ,IAAI,CAAC;IACpD,CAAC;IAED,IAAI,CAACK,gBAAgB,GAAIJ,KAAK,IAAK;MAC/BR,OAAO,CAACQ,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC5C,CAAC;IAED,IAAI,CAACK,YAAY,GAAG,MAAM;MACtBb,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC9C,CAAC;EACL;EAEAa,kBAAkBA,CAACC,QAAQ,EAAE;IACzB,IAAI,CAACtB,eAAe,GAAGsB,QAAQ;EACnC;AACJ;AAEA,eAAezB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}