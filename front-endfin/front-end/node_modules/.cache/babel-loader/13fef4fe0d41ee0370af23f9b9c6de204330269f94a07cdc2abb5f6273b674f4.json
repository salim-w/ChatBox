{"ast":null,"code":"import SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\nclass StompClient extends Client {\n  constructor() {\n    super();\n    this.handleMessage = message => {\n      try {\n        const receivedMessage = JSON.parse(message.body);\n        console.log('Received message:', receivedMessage);\n        if (this.messageCallback) {\n          this.messageCallback(receivedMessage);\n        }\n      } catch (error) {\n        console.error('Error parsing message:', error);\n      }\n    };\n    this.WEB_SOCKET_BASE_URL = 'http://localhost:8080/ws';\n    this.messageCallback = null;\n    this.webSocketFactory = () => {\n      return new SockJS(this.WEB_SOCKET_BASE_URL);\n    };\n    this.reconnectDelay = 5000;\n    this.heartbeatIncoming = 4000;\n    this.heartbeatOutgoing = 4000;\n    this.onConnect = frame => {\n      console.log('Connected:', frame);\n\n      // Global messages\n      this.subscribe('/topic/messages', this.handleMessage);\n\n      // Private messages by user\n      const username = localStorage.getItem('username');\n      if (username) {\n        this.subscribe(`/user/${username}/queue/private`, this.handleMessage);\n      }\n\n      // Room/conversation updates\n      this.subscribe('/topic/chat-rooms', this.handleMessage);\n    };\n    this.onStompError = frame => {\n      console.error('STOMP error:', frame.headers['message']);\n      console.error('Additional details:', frame.body);\n    };\n  }\n  setMessageCallback(callback) {\n    this.messageCallback = callback;\n  }\n}\nexport default StompClient;","map":{"version":3,"names":["SockJS","Client","StompClient","constructor","handleMessage","message","receivedMessage","JSON","parse","body","console","log","messageCallback","error","WEB_SOCKET_BASE_URL","webSocketFactory","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","frame","subscribe","username","localStorage","getItem","onStompError","headers","setMessageCallback","callback"],"sources":["C:/Users/asus/Desktop/front-end/src/proxy/stomp.js"],"sourcesContent":["import SockJS from 'sockjs-client';\r\nimport { Client } from '@stomp/stompjs';\r\n\r\nclass StompClient extends Client {\r\n    constructor() {\r\n        super();\r\n        this.WEB_SOCKET_BASE_URL = 'http://localhost:8080/ws';\r\n        this.messageCallback = null;\r\n\r\n        this.webSocketFactory = () => {\r\n            return new SockJS(this.WEB_SOCKET_BASE_URL);\r\n        };\r\n\r\n        this.reconnectDelay = 5000;\r\n        this.heartbeatIncoming = 4000;\r\n        this.heartbeatOutgoing = 4000;\r\n\r\n        this.onConnect = (frame) => {\r\n            console.log('Connected:', frame);\r\n\r\n            // Global messages\r\n            this.subscribe('/topic/messages', this.handleMessage);\r\n\r\n            // Private messages by user\r\n            const username = localStorage.getItem('username');\r\n            if (username) {\r\n                this.subscribe(`/user/${username}/queue/private`, this.handleMessage);\r\n            }\r\n\r\n            // Room/conversation updates\r\n            this.subscribe('/topic/chat-rooms', this.handleMessage);\r\n        };\r\n\r\n        this.onStompError = (frame) => {\r\n            console.error('STOMP error:', frame.headers['message']);\r\n            console.error('Additional details:', frame.body);\r\n        };\r\n    }\r\n\r\n    handleMessage = (message) => {\r\n        try {\r\n            const receivedMessage = JSON.parse(message.body);\r\n            console.log('Received message:', receivedMessage);\r\n            if (this.messageCallback) {\r\n                this.messageCallback(receivedMessage);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error parsing message:', error);\r\n        }\r\n    }\r\n\r\n    setMessageCallback(callback) {\r\n        this.messageCallback = callback;\r\n    }\r\n}\r\n\r\nexport default StompClient;"],"mappings":"AAAA,OAAOA,MAAM,MAAM,eAAe;AAClC,SAASC,MAAM,QAAQ,gBAAgB;AAEvC,MAAMC,WAAW,SAASD,MAAM,CAAC;EAC7BE,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;IAAC,KAkCZC,aAAa,GAAIC,OAAO,IAAK;MACzB,IAAI;QACA,MAAMC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;QAChDC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEL,eAAe,CAAC;QACjD,IAAI,IAAI,CAACM,eAAe,EAAE;UACtB,IAAI,CAACA,eAAe,CAACN,eAAe,CAAC;QACzC;MACJ,CAAC,CAAC,OAAOO,KAAK,EAAE;QACZH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACJ,CAAC;IA3CG,IAAI,CAACC,mBAAmB,GAAG,0BAA0B;IACrD,IAAI,CAACF,eAAe,GAAG,IAAI;IAE3B,IAAI,CAACG,gBAAgB,GAAG,MAAM;MAC1B,OAAO,IAAIf,MAAM,CAAC,IAAI,CAACc,mBAAmB,CAAC;IAC/C,CAAC;IAED,IAAI,CAACE,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAE7B,IAAI,CAACC,SAAS,GAAIC,KAAK,IAAK;MACxBV,OAAO,CAACC,GAAG,CAAC,YAAY,EAAES,KAAK,CAAC;;MAEhC;MACA,IAAI,CAACC,SAAS,CAAC,iBAAiB,EAAE,IAAI,CAACjB,aAAa,CAAC;;MAErD;MACA,MAAMkB,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MACjD,IAAIF,QAAQ,EAAE;QACV,IAAI,CAACD,SAAS,CAAC,SAASC,QAAQ,gBAAgB,EAAE,IAAI,CAAClB,aAAa,CAAC;MACzE;;MAEA;MACA,IAAI,CAACiB,SAAS,CAAC,mBAAmB,EAAE,IAAI,CAACjB,aAAa,CAAC;IAC3D,CAAC;IAED,IAAI,CAACqB,YAAY,GAAIL,KAAK,IAAK;MAC3BV,OAAO,CAACG,KAAK,CAAC,cAAc,EAAEO,KAAK,CAACM,OAAO,CAAC,SAAS,CAAC,CAAC;MACvDhB,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAEO,KAAK,CAACX,IAAI,CAAC;IACpD,CAAC;EACL;EAcAkB,kBAAkBA,CAACC,QAAQ,EAAE;IACzB,IAAI,CAAChB,eAAe,GAAGgB,QAAQ;EACnC;AACJ;AAEA,eAAe1B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}