{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Desktop\\\\front-end\\\\src\\\\component\\\\ChatConsole.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatConsole = () => {\n  _s();\n  const {\n    username\n  } = useParams();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [selectedFile, setSelectedFile] = useState(null);\n  useEffect(() => {\n    // Fetch messages from server based on username\n    const fetchMessages = async () => {\n      try {\n        const response = await fetch(`/api/messages/${username}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setMessages(data);\n      } catch (error) {\n        console.error(\"Error fetching messages:\", error);\n      }\n    };\n    fetchMessages();\n  }, [username]);\n  const handleContent = event => {\n    setNewMessage(event.target.value);\n  };\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    // Send message to server\n    try {\n      const formData = new FormData();\n      formData.append('username', username);\n      formData.append('message', newMessage);\n      if (selectedFile) {\n        formData.append('file', selectedFile);\n      }\n      const response = await fetch('/api/messages', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setMessages([...messages, data]);\n      setNewMessage('');\n      setSelectedFile(null);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Chat Console for \", username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: message.text\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: handleContent,\n        placeholder: \"Enter message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatConsole, \"ZyQolSOlu2ouZ6WptAYYcF7BVWM=\", false, function () {\n  return [useParams];\n});\n_c = ChatConsole;\nexport default ChatConsole;\nvar _c;\n$RefreshReg$(_c, \"ChatConsole\");","map":{"version":3,"names":["useState","useEffect","useParams","jsxDEV","_jsxDEV","ChatConsole","_s","username","messages","setMessages","newMessage","setNewMessage","selectedFile","setSelectedFile","fetchMessages","response","fetch","ok","Error","status","data","json","error","console","handleContent","event","target","value","handleFileChange","files","handleSubmit","preventDefault","formData","FormData","append","method","body","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","text","id","onSubmit","type","onChange","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/asus/Desktop/front-end/src/component/ChatConsole.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst ChatConsole = () => {\r\n  const { username } = useParams();\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch messages from server based on username\r\n    const fetchMessages = async () => {\r\n      try {\r\n        const response = await fetch(`/api/messages/${username}`);\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        setMessages(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching messages:\", error);\r\n      }\r\n    };\r\n\r\n    fetchMessages();\r\n  }, [username]);\r\n\r\n  const handleContent = (event) => {\r\n    setNewMessage(event.target.value);\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    setSelectedFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    // Send message to server\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('username', username);\r\n      formData.append('message', newMessage);\r\n      if (selectedFile) {\r\n        formData.append('file', selectedFile);\r\n      }\r\n      const response = await fetch('/api/messages', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      setMessages([...messages, data]);\r\n      setNewMessage('');\r\n      setSelectedFile(null);\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Chat Console for {username}</h1>\r\n      <ul>\r\n        {messages.map((message) => (\r\n          <li key={message.id}>{message.text}</li>\r\n        ))}\r\n      </ul>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={newMessage}\r\n          onChange={handleContent}\r\n          placeholder=\"Enter message\"\r\n        />\r\n        <input type=\"file\" onChange={handleFileChange} />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatConsole;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}