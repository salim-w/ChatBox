{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nexport const useSocket = username => {\n  _s();\n  const [client, setClient] = useState(null);\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    if (!username) return;\n    const socket = new SockJS('http://localhost:8080/ws');\n    const stompClient = Stomp.over(socket);\n    stompClient.connect({}, () => {\n      console.log('Connected to WebSocket');\n      setClient(stompClient);\n\n      // Utiliser un Set pour garder une trace des messages déjà reçus\n      const processedMessages = new Set();\n      stompClient.subscribe('/topic/messages', message => {\n        const newMessage = JSON.parse(message.body);\n        // Créer un identifiant unique pour le message\n        const messageId = `${newMessage.sender}-${newMessage.timestamp}-${newMessage.content}`;\n        if (!processedMessages.has(messageId)) {\n          processedMessages.add(messageId);\n          setMessages(prevMessages => {\n            // Vérifier si le message existe déjà dans prevMessages\n            const messageExists = prevMessages.some(msg => msg.sender === newMessage.sender && msg.timestamp === newMessage.timestamp && msg.content === newMessage.content);\n            if (!messageExists) {\n              return [...prevMessages, newMessage];\n            }\n            return prevMessages;\n          });\n        }\n      });\n      stompClient.subscribe(`/user/${username}/queue/private`, message => {\n        const newMessage = JSON.parse(message.body);\n        const messageId = `${newMessage.sender}-${newMessage.timestamp}-${newMessage.content}`;\n        if (!processedMessages.has(messageId)) {\n          processedMessages.add(messageId);\n          setMessages(prevMessages => {\n            const messageExists = prevMessages.some(msg => msg.sender === newMessage.sender && msg.timestamp === newMessage.timestamp && msg.content === newMessage.content);\n            if (!messageExists) {\n              return [...prevMessages, newMessage];\n            }\n            return prevMessages;\n          });\n        }\n      });\n    });\n    return () => {\n      if (stompClient && stompClient.connected) {\n        stompClient.disconnect();\n      }\n    };\n  }, [username]);\n  const sendMessage = useCallback(message => {\n    if (client && client.connected) {\n      client.send(\"/app/sendMessage\", {}, JSON.stringify(message));\n    }\n  }, [client]);\n  return {\n    messages,\n    sendMessage\n  };\n};\n_s(useSocket, \"pK0/o5InrDIAvMNLy16UzEURNkk=\");","map":{"version":3,"names":["useEffect","useState","useCallback","SockJS","Stomp","useSocket","username","_s","client","setClient","messages","setMessages","socket","stompClient","over","connect","console","log","processedMessages","Set","subscribe","message","newMessage","JSON","parse","body","messageId","sender","timestamp","content","has","add","prevMessages","messageExists","some","msg","connected","disconnect","sendMessage","send","stringify"],"sources":["C:/Users/asus/Desktop/front-end/src/hooks/useSocket.js"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from '@stomp/stompjs';\r\n\r\nexport const useSocket = (username) => {\r\n  const [client, setClient] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!username) return;\r\n\r\n    const socket = new SockJS('http://localhost:8080/ws');\r\n    const stompClient = Stomp.over(socket);\r\n\r\n    stompClient.connect({}, () => {\r\n      console.log('Connected to WebSocket');\r\n      setClient(stompClient);\r\n\r\n      // Utiliser un Set pour garder une trace des messages déjà reçus\r\n      const processedMessages = new Set();\r\n\r\n      stompClient.subscribe('/topic/messages', (message) => {\r\n        const newMessage = JSON.parse(message.body);\r\n        // Créer un identifiant unique pour le message\r\n        const messageId = `${newMessage.sender}-${newMessage.timestamp}-${newMessage.content}`;\r\n\r\n        if (!processedMessages.has(messageId)) {\r\n          processedMessages.add(messageId);\r\n          setMessages(prevMessages => {\r\n            // Vérifier si le message existe déjà dans prevMessages\r\n            const messageExists = prevMessages.some(msg =>\r\n              msg.sender === newMessage.sender &&\r\n              msg.timestamp === newMessage.timestamp &&\r\n              msg.content === newMessage.content\r\n            );\r\n\r\n            if (!messageExists) {\r\n              return [...prevMessages, newMessage];\r\n            }\r\n            return prevMessages;\r\n          });\r\n        }\r\n      });\r\n\r\n      stompClient.subscribe(`/user/${username}/queue/private`, (message) => {\r\n        const newMessage = JSON.parse(message.body);\r\n        const messageId = `${newMessage.sender}-${newMessage.timestamp}-${newMessage.content}`;\r\n\r\n        if (!processedMessages.has(messageId)) {\r\n          processedMessages.add(messageId);\r\n          setMessages(prevMessages => {\r\n            const messageExists = prevMessages.some(msg =>\r\n              msg.sender === newMessage.sender &&\r\n              msg.timestamp === newMessage.timestamp &&\r\n              msg.content === newMessage.content\r\n            );\r\n\r\n            if (!messageExists) {\r\n              return [...prevMessages, newMessage];\r\n            }\r\n            return prevMessages;\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      if (stompClient && stompClient.connected) {\r\n        stompClient.disconnect();\r\n      }\r\n    };\r\n  }, [username]);\r\n\r\n  const sendMessage = useCallback((message) => {\r\n    if (client && client.connected) {\r\n      client.send(\"/app/sendMessage\", {}, JSON.stringify(message));\r\n    }\r\n  }, [client]);\r\n\r\n  return { messages, sendMessage };\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}