{"ast":null,"code":"import SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\nclass StompClient extends Client {\n  constructor() {\n    super();\n    this.handleMessage = message => {\n      try {\n        const parsedMessage = JSON.parse(message.body);\n        console.log('Received:', parsedMessage);\n        this.messageCallbacks.forEach(callback => callback(parsedMessage));\n      } catch (error) {\n        console.error('Message parsing error:', error);\n      }\n    };\n    this.WEB_SOCKET_BASE_URL = 'http://localhost:8080/ws';\n    this.messageCallbacks = new Set();\n    this.webSocketFactory = () => {\n      return new SockJS(this.WEB_SOCKET_BASE_URL);\n    };\n    this.reconnectDelay = 5000;\n    this.heartbeatIncoming = 4000;\n    this.heartbeatOutgoing = 4000;\n    this.onConnect = () => {\n      console.log('Connected to WebSocket');\n      const username = localStorage.getItem('username');\n\n      // Subscribe to global channel\n      this.subscribe('/topic/public', this.handleMessage);\n\n      // Subscribe to user's private channel\n      if (username) {\n        this.subscribe(`/user/${username}/private`, this.handleMessage);\n        this.subscribe(`/topic/chat/${username}`, this.handleMessage);\n      }\n    };\n    this.onStompError = frame => {\n      console.error('STOMP error:', frame);\n    };\n  }\n  addMessageCallback(callback) {\n    this.messageCallbacks.add(callback);\n  }\n  removeMessageCallback(callback) {\n    this.messageCallbacks.delete(callback);\n  }\n  sendMessage(message) {\n    if (!this.connected) {\n      throw new Error('WebSocket not connected');\n    }\n    this.publish({\n      destination: '/app/chat.send',\n      body: JSON.stringify(message)\n    });\n  }\n}\nexport default StompClient;","map":{"version":3,"names":["SockJS","Client","StompClient","constructor","handleMessage","message","parsedMessage","JSON","parse","body","console","log","messageCallbacks","forEach","callback","error","WEB_SOCKET_BASE_URL","Set","webSocketFactory","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","username","localStorage","getItem","subscribe","onStompError","frame","addMessageCallback","add","removeMessageCallback","delete","sendMessage","connected","Error","publish","destination","stringify"],"sources":["C:/Users/asus/Desktop/front-end/src/proxy/stomp.js"],"sourcesContent":["import SockJS from 'sockjs-client';\r\nimport { Client } from '@stomp/stompjs';\r\n\r\nclass StompClient extends Client {\r\n    constructor() {\r\n        super();\r\n        this.WEB_SOCKET_BASE_URL = 'http://localhost:8080/ws';\r\n        this.messageCallbacks = new Set();\r\n\r\n        this.webSocketFactory = () => {\r\n            return new SockJS(this.WEB_SOCKET_BASE_URL);\r\n        };\r\n\r\n        this.reconnectDelay = 5000;\r\n        this.heartbeatIncoming = 4000;\r\n        this.heartbeatOutgoing = 4000;\r\n\r\n        this.onConnect = () => {\r\n            console.log('Connected to WebSocket');\r\n            const username = localStorage.getItem('username');\r\n\r\n            // Subscribe to global channel\r\n            this.subscribe('/topic/public', this.handleMessage);\r\n\r\n            // Subscribe to user's private channel\r\n            if (username) {\r\n                this.subscribe(`/user/${username}/private`, this.handleMessage);\r\n                this.subscribe(`/topic/chat/${username}`, this.handleMessage);\r\n            }\r\n        };\r\n\r\n        this.onStompError = (frame) => {\r\n            console.error('STOMP error:', frame);\r\n        };\r\n    }\r\n\r\n    handleMessage = (message) => {\r\n        try {\r\n            const parsedMessage = JSON.parse(message.body);\r\n            console.log('Received:', parsedMessage);\r\n            this.messageCallbacks.forEach(callback => callback(parsedMessage));\r\n        } catch (error) {\r\n            console.error('Message parsing error:', error);\r\n        }\r\n    }\r\n\r\n    addMessageCallback(callback) {\r\n        this.messageCallbacks.add(callback);\r\n    }\r\n\r\n    removeMessageCallback(callback) {\r\n        this.messageCallbacks.delete(callback);\r\n    }\r\n\r\n    sendMessage(message) {\r\n        if (!this.connected) {\r\n            throw new Error('WebSocket not connected');\r\n        }\r\n\r\n        this.publish({\r\n            destination: '/app/chat.send',\r\n            body: JSON.stringify(message)\r\n        });\r\n    }\r\n}\r\n\r\nexport default StompClient;"],"mappings":"AAAA,OAAOA,MAAM,MAAM,eAAe;AAClC,SAASC,MAAM,QAAQ,gBAAgB;AAEvC,MAAMC,WAAW,SAASD,MAAM,CAAC;EAC7BE,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;IAAC,KA+BZC,aAAa,GAAIC,OAAO,IAAK;MACzB,IAAI;QACA,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;QAC9CC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEL,aAAa,CAAC;QACvC,IAAI,CAACM,gBAAgB,CAACC,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAACR,aAAa,CAAC,CAAC;MACtE,CAAC,CAAC,OAAOS,KAAK,EAAE;QACZL,OAAO,CAACK,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACJ,CAAC;IAtCG,IAAI,CAACC,mBAAmB,GAAG,0BAA0B;IACrD,IAAI,CAACJ,gBAAgB,GAAG,IAAIK,GAAG,CAAC,CAAC;IAEjC,IAAI,CAACC,gBAAgB,GAAG,MAAM;MAC1B,OAAO,IAAIlB,MAAM,CAAC,IAAI,CAACgB,mBAAmB,CAAC;IAC/C,CAAC;IAED,IAAI,CAACG,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAE7B,IAAI,CAACC,SAAS,GAAG,MAAM;MACnBZ,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrC,MAAMY,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;;MAEjD;MACA,IAAI,CAACC,SAAS,CAAC,eAAe,EAAE,IAAI,CAACtB,aAAa,CAAC;;MAEnD;MACA,IAAImB,QAAQ,EAAE;QACV,IAAI,CAACG,SAAS,CAAC,SAASH,QAAQ,UAAU,EAAE,IAAI,CAACnB,aAAa,CAAC;QAC/D,IAAI,CAACsB,SAAS,CAAC,eAAeH,QAAQ,EAAE,EAAE,IAAI,CAACnB,aAAa,CAAC;MACjE;IACJ,CAAC;IAED,IAAI,CAACuB,YAAY,GAAIC,KAAK,IAAK;MAC3BlB,OAAO,CAACK,KAAK,CAAC,cAAc,EAAEa,KAAK,CAAC;IACxC,CAAC;EACL;EAYAC,kBAAkBA,CAACf,QAAQ,EAAE;IACzB,IAAI,CAACF,gBAAgB,CAACkB,GAAG,CAAChB,QAAQ,CAAC;EACvC;EAEAiB,qBAAqBA,CAACjB,QAAQ,EAAE;IAC5B,IAAI,CAACF,gBAAgB,CAACoB,MAAM,CAAClB,QAAQ,CAAC;EAC1C;EAEAmB,WAAWA,CAAC5B,OAAO,EAAE;IACjB,IAAI,CAAC,IAAI,CAAC6B,SAAS,EAAE;MACjB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC9C;IAEA,IAAI,CAACC,OAAO,CAAC;MACTC,WAAW,EAAE,gBAAgB;MAC7B5B,IAAI,EAAEF,IAAI,CAAC+B,SAAS,CAACjC,OAAO;IAChC,CAAC,CAAC;EACN;AACJ;AAEA,eAAeH,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}