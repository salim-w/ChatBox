{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Desktop\\\\front-end\\\\src\\\\proxy\\\\StompProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useRef, useState } from 'react';\nimport { useDispatch } from \"react-redux\";\nimport { addMessage } from \"../redux/action\";\nimport StompClient from './stomp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageContext = /*#__PURE__*/createContext();\nexport const useMessageContext = () => {\n  _s();\n  return useContext(MessageContext);\n};\n_s(useMessageContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function StompProvider({\n  children\n}) {\n  _s2();\n  const clientRef = useRef(null);\n  const dispatch = useDispatch();\n  const [isConnected, setIsConnected] = useState(false);\n  useEffect(() => {\n    const client = new StompClient();\n    clientRef.current = client;\n    client.setMessageCallback(message => {\n      console.log('Dispatching message:', message);\n      dispatch(addMessage(message));\n    });\n    client.onConnect = frame => {\n      setIsConnected(true);\n      const username = localStorage.getItem('username');\n\n      // Subscribe to global and private channels\n      client.subscribe('/topic/messages', client.handleMessage);\n      if (username) {\n        client.subscribe(`/user/${username}/queue/private`, client.handleMessage);\n      }\n    };\n    client.activate();\n    return () => {\n      if (client.connected) {\n        client.deactivate();\n      }\n    };\n  }, [dispatch]);\n  const publishMessage = async (destination, message) => {\n    var _clientRef$current;\n    if (!isConnected) {\n      throw new Error('WebSocket not connected');\n    }\n    (_clientRef$current = clientRef.current) === null || _clientRef$current === void 0 ? void 0 : _clientRef$current.publish({\n      destination,\n      body: JSON.stringify(message)\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(MessageContext.Provider, {\n    value: {\n      publishMessage,\n      isConnected\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n_s2(StompProvider, \"PrWtIv65qEtfngIrbAWO3nVDwCQ=\", false, function () {\n  return [useDispatch];\n});\n_c = StompProvider;\nvar _c;\n$RefreshReg$(_c, \"StompProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useRef","useState","useDispatch","addMessage","StompClient","jsxDEV","_jsxDEV","MessageContext","useMessageContext","_s","StompProvider","children","_s2","clientRef","dispatch","isConnected","setIsConnected","client","current","setMessageCallback","message","console","log","onConnect","frame","username","localStorage","getItem","subscribe","handleMessage","activate","connected","deactivate","publishMessage","destination","_clientRef$current","Error","publish","body","JSON","stringify","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/asus/Desktop/front-end/src/proxy/StompProvider.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useRef, useState } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addMessage } from \"../redux/action\";\r\nimport StompClient from './stomp';\r\n\r\nconst MessageContext = createContext();\r\nexport const useMessageContext = () => useContext(MessageContext);\r\n\r\nexport function StompProvider({ children }) {\r\n    const clientRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const [isConnected, setIsConnected] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const client = new StompClient();\r\n        clientRef.current = client;\r\n\r\n        client.setMessageCallback((message) => {\r\n            console.log('Dispatching message:', message);\r\n            dispatch(addMessage(message));\r\n        });\r\n\r\n        client.onConnect = (frame) => {\r\n            setIsConnected(true);\r\n            const username = localStorage.getItem('username');\r\n\r\n            // Subscribe to global and private channels\r\n            client.subscribe('/topic/messages', client.handleMessage);\r\n            if (username) {\r\n                client.subscribe(`/user/${username}/queue/private`, client.handleMessage);\r\n            }\r\n        };\r\n\r\n        client.activate();\r\n\r\n        return () => {\r\n            if (client.connected) {\r\n                client.deactivate();\r\n            }\r\n        };\r\n    }, [dispatch]);\r\n\r\n    const publishMessage = async (destination, message) => {\r\n        if (!isConnected) {\r\n            throw new Error('WebSocket not connected');\r\n        }\r\n\r\n        clientRef.current?.publish({\r\n            destination,\r\n            body: JSON.stringify(message)\r\n        });\r\n    };\r\n\r\n    return (\r\n        <MessageContext.Provider value={{ publishMessage, isConnected }}>\r\n            {children}\r\n        </MessageContext.Provider>\r\n    );\r\n}"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACrF,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,OAAOC,WAAW,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,cAAc,gBAAGV,aAAa,CAAC,CAAC;AACtC,OAAO,MAAMW,iBAAiB,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMX,UAAU,CAACS,cAAc,CAAC;AAAA;AAACE,EAAA,CAArDD,iBAAiB;AAE9B,OAAO,SAASE,aAAaA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EACxC,MAAMC,SAAS,GAAGb,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMc,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAErDF,SAAS,CAAC,MAAM;IACZ,MAAMkB,MAAM,GAAG,IAAIb,WAAW,CAAC,CAAC;IAChCS,SAAS,CAACK,OAAO,GAAGD,MAAM;IAE1BA,MAAM,CAACE,kBAAkB,CAAEC,OAAO,IAAK;MACnCC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,OAAO,CAAC;MAC5CN,QAAQ,CAACX,UAAU,CAACiB,OAAO,CAAC,CAAC;IACjC,CAAC,CAAC;IAEFH,MAAM,CAACM,SAAS,GAAIC,KAAK,IAAK;MAC1BR,cAAc,CAAC,IAAI,CAAC;MACpB,MAAMS,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;;MAEjD;MACAV,MAAM,CAACW,SAAS,CAAC,iBAAiB,EAAEX,MAAM,CAACY,aAAa,CAAC;MACzD,IAAIJ,QAAQ,EAAE;QACVR,MAAM,CAACW,SAAS,CAAC,SAASH,QAAQ,gBAAgB,EAAER,MAAM,CAACY,aAAa,CAAC;MAC7E;IACJ,CAAC;IAEDZ,MAAM,CAACa,QAAQ,CAAC,CAAC;IAEjB,OAAO,MAAM;MACT,IAAIb,MAAM,CAACc,SAAS,EAAE;QAClBd,MAAM,CAACe,UAAU,CAAC,CAAC;MACvB;IACJ,CAAC;EACL,CAAC,EAAE,CAAClB,QAAQ,CAAC,CAAC;EAEd,MAAMmB,cAAc,GAAG,MAAAA,CAAOC,WAAW,EAAEd,OAAO,KAAK;IAAA,IAAAe,kBAAA;IACnD,IAAI,CAACpB,WAAW,EAAE;MACd,MAAM,IAAIqB,KAAK,CAAC,yBAAyB,CAAC;IAC9C;IAEA,CAAAD,kBAAA,GAAAtB,SAAS,CAACK,OAAO,cAAAiB,kBAAA,uBAAjBA,kBAAA,CAAmBE,OAAO,CAAC;MACvBH,WAAW;MACXI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACpB,OAAO;IAChC,CAAC,CAAC;EACN,CAAC;EAED,oBACId,OAAA,CAACC,cAAc,CAACkC,QAAQ;IAACC,KAAK,EAAE;MAAET,cAAc;MAAElB;IAAY,CAAE;IAAAJ,QAAA,EAC3DA;EAAQ;IAAAgC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAElC;AAAClC,GAAA,CAlDeF,aAAa;EAAA,QAERR,WAAW;AAAA;AAAA6C,EAAA,GAFhBrC,aAAa;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}