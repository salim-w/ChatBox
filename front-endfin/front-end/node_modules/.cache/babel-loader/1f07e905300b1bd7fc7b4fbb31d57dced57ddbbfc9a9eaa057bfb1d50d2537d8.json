{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Wissal\\\\Downloads\\\\front-endfin\\\\front-end\\\\src\\\\proxy\\\\StompProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageContext = /*#__PURE__*/createContext();\nexport const useMessageContext = () => {\n  _s();\n  return useContext(MessageContext);\n};\n_s(useMessageContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const MessageProvider = ({\n  children\n}) => {\n  _s2();\n  const [client, setClient] = useState(null);\n  const connect = useCallback(() => {\n    const socket = new SockJS('http://localhost:8080/ws');\n    const stompClient = Stomp.over(socket);\n    stompClient.connect({}, () => {\n      console.log('Connected to WebSocket');\n      setClient(stompClient);\n    });\n    return () => {\n      if (stompClient && stompClient.connected) {\n        stompClient.disconnect();\n      }\n    };\n  }, []);\n  const publishMessage = useCallback((destination, message) => {\n    if (client && client.connected) {\n      client.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected');\n    }\n  }, [client]);\n  return /*#__PURE__*/_jsxDEV(MessageContext.Provider, {\n    value: {\n      connect,\n      publishMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s2(MessageProvider, \"Wqu4Q0CgMmfrsDEtNFgEYPcGJgA=\");\n_c = MessageProvider;\nvar _c;\n$RefreshReg$(_c, \"MessageProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","SockJS","Stomp","jsxDEV","_jsxDEV","MessageContext","useMessageContext","_s","MessageProvider","children","_s2","client","setClient","connect","socket","stompClient","over","console","log","connected","disconnect","publishMessage","destination","message","send","JSON","stringify","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Wissal/Downloads/front-endfin/front-end/src/proxy/StompProvider.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from '@stomp/stompjs';\r\n\r\nconst MessageContext = createContext();\r\n\r\nexport const useMessageContext = () => useContext(MessageContext);\r\n\r\nexport const MessageProvider = ({ children }) => {\r\n  const [client, setClient] = useState(null);\r\n\r\n  const connect = useCallback(() => {\r\n    const socket = new SockJS('http://localhost:8080/ws');\r\n    const stompClient = Stomp.over(socket);\r\n\r\n    stompClient.connect({}, () => {\r\n      console.log('Connected to WebSocket');\r\n      setClient(stompClient);\r\n    });\r\n\r\n    return () => {\r\n      if (stompClient && stompClient.connected) {\r\n        stompClient.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const publishMessage = useCallback((destination, message) => {\r\n    if (client && client.connected) {\r\n      client.send(destination, {}, JSON.stringify(message));\r\n    } else {\r\n      console.error('WebSocket is not connected');\r\n    }\r\n  }, [client]);\r\n\r\n  return (\r\n    <MessageContext.Provider value={{ connect, publishMessage }}>\r\n      {children}\r\n    </MessageContext.Provider>\r\n  );\r\n};\r\n\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC/E,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,cAAc,gBAAGR,aAAa,CAAC,CAAC;AAEtC,OAAO,MAAMS,iBAAiB,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMT,UAAU,CAACO,cAAc,CAAC;AAAA;AAACE,EAAA,CAArDD,iBAAiB;AAE9B,OAAO,MAAME,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC/C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMc,OAAO,GAAGb,WAAW,CAAC,MAAM;IAChC,MAAMc,MAAM,GAAG,IAAIb,MAAM,CAAC,0BAA0B,CAAC;IACrD,MAAMc,WAAW,GAAGb,KAAK,CAACc,IAAI,CAACF,MAAM,CAAC;IAEtCC,WAAW,CAACF,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM;MAC5BI,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrCN,SAAS,CAACG,WAAW,CAAC;IACxB,CAAC,CAAC;IAEF,OAAO,MAAM;MACX,IAAIA,WAAW,IAAIA,WAAW,CAACI,SAAS,EAAE;QACxCJ,WAAW,CAACK,UAAU,CAAC,CAAC;MAC1B;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAGrB,WAAW,CAAC,CAACsB,WAAW,EAAEC,OAAO,KAAK;IAC3D,IAAIZ,MAAM,IAAIA,MAAM,CAACQ,SAAS,EAAE;MAC9BR,MAAM,CAACa,IAAI,CAACF,WAAW,EAAE,CAAC,CAAC,EAAEG,IAAI,CAACC,SAAS,CAACH,OAAO,CAAC,CAAC;IACvD,CAAC,MAAM;MACLN,OAAO,CAACU,KAAK,CAAC,4BAA4B,CAAC;IAC7C;EACF,CAAC,EAAE,CAAChB,MAAM,CAAC,CAAC;EAEZ,oBACEP,OAAA,CAACC,cAAc,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAEhB,OAAO;MAAEQ;IAAe,CAAE;IAAAZ,QAAA,EACzDA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAACvB,GAAA,CAhCWF,eAAe;AAAA0B,EAAA,GAAf1B,eAAe;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}