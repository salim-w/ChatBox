{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nexport const useSocket = username => {\n  _s();\n  const [client, setClient] = useState(null);\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    if (!username) return;\n    const socket = new SockJS('http://localhost:8080/ws');\n    const stompClient = Stomp.over(socket);\n    stompClient.connect({}, () => {\n      console.log('Connected to WebSocket');\n      setClient(stompClient);\n\n      // S'abonner au canal public\n      stompClient.subscribe('/topic/messages', message => {\n        const newMessage = JSON.parse(message.body);\n        setMessages(prevMessages => [...prevMessages, newMessage]);\n      });\n\n      // S'abonner au canal privé de l'utilisateur\n      stompClient.subscribe(`/user/${username}/queue/private`, message => {\n        const newMessage = JSON.parse(message.body);\n        setMessages(prevMessages => [...prevMessages, newMessage]);\n      });\n\n      // S'abonner aux notifications de statut\n      stompClient.subscribe('/topic/status', statusMessage => {\n        console.log('Status update:', JSON.parse(statusMessage.body));\n      });\n    });\n    return () => {\n      if (stompClient) {\n        stompClient.disconnect();\n      }\n    };\n  }, [username]);\n  const sendMessage = useCallback(message => {\n    if (client && message) {\n      client.send(\"/app/sendMessage\", {}, JSON.stringify(message));\n    }\n  }, [client]);\n  return {\n    messages,\n    sendMessage\n  };\n};\n_s(useSocket, \"pK0/o5InrDIAvMNLy16UzEURNkk=\");","map":{"version":3,"names":["useEffect","useState","useCallback","SockJS","Stomp","useSocket","username","_s","client","setClient","messages","setMessages","socket","stompClient","over","connect","console","log","subscribe","message","newMessage","JSON","parse","body","prevMessages","statusMessage","disconnect","sendMessage","send","stringify"],"sources":["C:/Users/asus/Desktop/front-end/src/hooks/useSocket.js"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from '@stomp/stompjs';\r\n\r\nexport const useSocket = (username) => {\r\n  const [client, setClient] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!username) return;\r\n\r\n    const socket = new SockJS('http://localhost:8080/ws');\r\n    const stompClient = Stomp.over(socket);\r\n\r\n    stompClient.connect({}, () => {\r\n      console.log('Connected to WebSocket');\r\n      setClient(stompClient);\r\n\r\n      // S'abonner au canal public\r\n      stompClient.subscribe('/topic/messages', (message) => {\r\n        const newMessage = JSON.parse(message.body);\r\n        setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n      });\r\n\r\n      // S'abonner au canal privé de l'utilisateur\r\n      stompClient.subscribe(`/user/${username}/queue/private`, (message) => {\r\n        const newMessage = JSON.parse(message.body);\r\n        setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n      });\r\n\r\n      // S'abonner aux notifications de statut\r\n      stompClient.subscribe('/topic/status', (statusMessage) => {\r\n        console.log('Status update:', JSON.parse(statusMessage.body));\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      if (stompClient) {\r\n        stompClient.disconnect();\r\n      }\r\n    };\r\n  }, [username]);\r\n\r\n  const sendMessage = useCallback((message) => {\r\n    if (client && message) {\r\n      client.send(\"/app/sendMessage\", {}, JSON.stringify(message));\r\n    }\r\n  }, [client]);\r\n\r\n  return { messages, sendMessage };\r\n};\r\n\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACxD,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,OAAO,MAAMC,SAAS,GAAIC,QAAQ,IAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,QAAQ,EAAE;IAEf,MAAMM,MAAM,GAAG,IAAIT,MAAM,CAAC,0BAA0B,CAAC;IACrD,MAAMU,WAAW,GAAGT,KAAK,CAACU,IAAI,CAACF,MAAM,CAAC;IAEtCC,WAAW,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM;MAC5BC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrCR,SAAS,CAACI,WAAW,CAAC;;MAEtB;MACAA,WAAW,CAACK,SAAS,CAAC,iBAAiB,EAAGC,OAAO,IAAK;QACpD,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;QAC3CZ,WAAW,CAAEa,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEJ,UAAU,CAAC,CAAC;MAC9D,CAAC,CAAC;;MAEF;MACAP,WAAW,CAACK,SAAS,CAAC,SAASZ,QAAQ,gBAAgB,EAAGa,OAAO,IAAK;QACpE,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;QAC3CZ,WAAW,CAAEa,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEJ,UAAU,CAAC,CAAC;MAC9D,CAAC,CAAC;;MAEF;MACAP,WAAW,CAACK,SAAS,CAAC,eAAe,EAAGO,aAAa,IAAK;QACxDT,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEI,IAAI,CAACC,KAAK,CAACG,aAAa,CAACF,IAAI,CAAC,CAAC;MAC/D,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,MAAM;MACX,IAAIV,WAAW,EAAE;QACfA,WAAW,CAACa,UAAU,CAAC,CAAC;MAC1B;IACF,CAAC;EACH,CAAC,EAAE,CAACpB,QAAQ,CAAC,CAAC;EAEd,MAAMqB,WAAW,GAAGzB,WAAW,CAAEiB,OAAO,IAAK;IAC3C,IAAIX,MAAM,IAAIW,OAAO,EAAE;MACrBX,MAAM,CAACoB,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,EAAEP,IAAI,CAACQ,SAAS,CAACV,OAAO,CAAC,CAAC;IAC9D;EACF,CAAC,EAAE,CAACX,MAAM,CAAC,CAAC;EAEZ,OAAO;IAAEE,QAAQ;IAAEiB;EAAY,CAAC;AAClC,CAAC;AAACpB,EAAA,CA9CWF,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}